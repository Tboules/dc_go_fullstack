// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM ` + "`" + `session` + "`" + `
WHERE token = ?
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, token)
	return err
}

const deleteUserSession = `-- name: DeleteUserSession :exec
DELETE FROM ` + "`" + `session` + "`" + `
WHERE user_id = ?
`

func (q *Queries) DeleteUserSession(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserSession, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, token, user_id, created_at, expires_at FROM ` + "`" + `session` + "`" + `
WHERE token = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const saveSession = `-- name: SaveSession :execresult
INSERT INTO ` + "`" + `session` + "`" + ` (
  token, user_id, expires_at
) VALUES (
  ?, ?, ?
)
`

type SaveSessionParams struct {
	Token     string    `json:"token"`
	UserID    int64     `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) SaveSession(ctx context.Context, arg SaveSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, saveSession, arg.Token, arg.UserID, arg.ExpiresAt)
}
